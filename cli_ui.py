# -*- coding: utf-8 -*-
"""
M√≥dulo da Interface de Utilizador de Linha de Comando (CLI-UI).
Cont√©m todas as fun√ß√µes para intera√ß√£o com o utilizador, como menus,
sele√ß√£o de ficheiros e orquestra√ß√£o dos fluxos de trabalho.
"""
import os
import sys
import asyncio
import subprocess
import shutil
from pathlib import Path
import time
import requests

import aioconsole
from tqdm import tqdm


def limpar_tela():
    """Limpa a tela do terminal de forma cross-platform."""
    sistema = sys.platform
    if sistema == "win32":
        subprocess.run("cls", shell=True)
    else:
        subprocess.run("clear", shell=True)

# Importa de todos os nossos outros m√≥dulos
import config
import shared_state
import system_utils
import file_handlers
import text_processing
import tts_service
import ffmpeg_utils
import settings_manager
import updater # <- NOVA IMPORTA√á√ÉO

async def exibir_banner_e_menu(titulo, opcoes):
    """Exibe o banner e o menu principal, permitindo que o utilizador escolha uma op√ß√£o."""
    limpar_tela()
    print("‚ïî" + "‚ïê" * 60 + "‚ïó")
    print("‚ïë{:^60}‚ïë".format(" Conversor TTS Completo "))
    print("‚ïë{:^60}‚ïë".format(" por Jonatas-Correa-Dev "))
    print("‚ïö" + "‚ïê" * 60 + "‚ïù")
    print(f"\n{titulo}:")
    
    for key, value in opcoes.items():
        print(f"  [{key}] {value}")
    
    print(f"\n{'‚îÄ' * 50}")
    
    try:
        escolha = await aioconsole.ainput("Selecione uma op√ß√£o: ")
        if escolha.isdigit():
            escolha_numero = int(escolha)
            if str(escolha_numero) in opcoes.keys():
                return escolha_numero
            else:
                print("‚ö†Ô∏è Op√ß√£o inv√°lida. Tente novamente.")
                await aioconsole.ainput("Pressione ENTER para continuar...")
                return -1
        else:
            print("‚ö†Ô∏è Por favor, insira um n√∫mero v√°lido.")
            await aioconsole.ainput("Pressione ENTER para continuar...")
            return -1
    except Exception as e:
        print(f"‚ùå Erro na sele√ß√£o do menu: {e}")
        return -1

async def iniciar_conversao_tts():
    """Inicia o processo de convers√£o de texto para fala."""
    print("üöÄ Iniciar convers√£o TTS...")
    # Implementar a l√≥gica para convers√£o TTS
    print("‚ö†Ô∏è Fun√ß√£o em desenvolvimento...")
    await aioconsole.ainput("Pressione ENTER para continuar...")

async def iniciar_conversao_em_lote():
    """Inicia o processo de convers√£o em lote."""
    print("üìö Iniciar convers√£o em lote...")
    # Implementar a l√≥gica para convers√£o em lote
    print("‚ö†Ô∏è Fun√ß√£o em desenvolvimento...")
    await aioconsole.ainput("Pressione ENTER para continuar...")

async def testar_vozes_tts():
    """Permite testar as vozes TTS dispon√≠veis."""
    print("üéôÔ∏è Testar vozes TTS...")
    # Implementar a l√≥gica para testar vozes
    print("‚ö†Ô∏è Fun√ß√£o em desenvolvimento...")
    await aioconsole.ainput("Pressione ENTER para continuar...")

async def menu_melhorar_audio_video():
    """Exibe o menu para melhorar √°udio/v√≠deo."""
    print("‚ö° Menu para melhorar √°udio/v√≠deo...")
    # Implementar a l√≥gica para melhorar √°udio/v√≠deo
    print("‚ö†Ô∏è Fun√ß√£o em desenvolvimento...")
    await aioconsole.ainput("Pressione ENTER para continuar...")

async def menu_gerenciar_configuracoes():
    """Exibe o menu para gerir configura√ß√µes."""
    print("‚öôÔ∏è Menu de configura√ß√µes...")
    # Implementar a l√≥gica para gerir configura√ß√µes
    print("‚ö†Ô∏è Fun√ß√£o em desenvolvimento...")
    await aioconsole.ainput("Pressione ENTER para continuar...")

async def exibir_ajuda():
    """Exibe a ajuda do programa."""
    limpar_tela()
    print("‚ùì AJUDA - Conversor TTS Completo")
    print("="*60)
    print("Este programa converte textos de v√°rios formatos (PDF, EPUB, TXT)")
    print("em ficheiros de √°udio (TTS) usando as vozes da Microsoft Edge.")
    print()
    print("FUNCIONALIDADES:")
    print("‚Ä¢ Converter ficheiros PDF, EPUB, TXT para √°udio")
    print("‚Ä¢ Converter ficheiros em lote (pasta inteira)")
    print("‚Ä¢ Testar vozes TTS dispon√≠veis")
    print("‚Ä¢ Melhorar √°udio/v√≠deo gerado")
    print("‚Ä¢ Configurar vozes e velocidade padr√£o")
    print("‚Ä¢ Atualizar automaticamente o script")
    print()
    print("SUPORTE:")
    print("‚Ä¢ Formatos de entrada: PDF, EPUB, TXT")
    print("‚Ä¢ Formatos de sa√≠da: MP3, WAV")
    print("‚Ä¢ Vozes suportadas: Todas as vozes do Microsoft Edge TTS")
    print("="*60)
    
    await aioconsole.ainput("\nPressione ENTER para voltar ao menu...")

# SUBSTITUA A FUN√á√ÉO ANTIGA "atualizar_script" POR ESTA NOVA VERS√ÉO
async def atualizar_script():
    """Verifica por atualiza√ß√µes no reposit√≥rio GitHub de forma segura."""
    limpar_tela()
    print("üîÑ ATUALIZA√á√ÉO DO SCRIPT")
    
    if not updater.is_git_repository():
        print("\n‚ö†Ô∏è Esta instala√ß√£o n√£o foi feita via 'git clone'.")
        print("A verifica√ß√£o autom√°tica n√£o √© poss√≠vel.")
        print("\nPara atualizar, por favor, siga estes passos:")
        print("1. Fa√ßa backup do seu ficheiro 'settings.ini'.")
        print(f"2. Apague a pasta atual do projeto.")
        print(f"3. Reinstale o projeto seguindo as instru√ß√µes no README.")
        print(f"\nReposit√≥rio: {updater.REPO_URL}")
    else:
        status, mensagem = updater.check_for_updates_git()
        print(f"\n{mensagem}")

        if status == "atualizacao_disponivel":
            print("\nPara atualizar, siga estes passos no seu terminal:")
            print("1. Certifique-se de que o ambiente virtual (venv) est√° desativado.")
            print("2. Navegue at√© √† pasta do projeto.")
            print("3. Execute o comando: git pull")
            print("\nAp√≥s a atualiza√ß√£o, lembre-se de reativar o venv e verificar se h√° novas depend√™ncias:")
            print("pip install -r requirements.txt")

    await aioconsole.ainput("\nPressione ENTER para voltar ao menu...")

