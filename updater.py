# -*- coding: utf-8 -*-
"""
M√≥dulo para gerir a verifica√ß√£o de atualiza√ß√µes do projeto usando Git.
"""
import os
import subprocess
from pathlib import Path

# URL do reposit√≥rio remoto para refer√™ncia
REPO_URL = "https://github.com/JonJonesBR/MeuConversorTTS.git"

def is_git_repository():
    """Verifica se o diret√≥rio atual do script √© um reposit√≥rio Git v√°lido."""
    project_path = Path.cwd()
    git_path = project_path / ".git"
    return git_path.is_dir()

def check_for_updates_git():
    """
    Usa comandos Git para verificar se h√° atualiza√ß√µes no reposit√≥rio remoto.
    Retorna um status: 'atualizado', 'atualizacao_disponivel', 'erro' ou 'divergente'.
    """
    try:
<<<<<<< HEAD
        print("A verificar o estado do repositorio local...")
        # Garante que o estado local est√° limpo antes de verificar
=======
        print("üîé A verificar o estado do reposit√≥rio local...")
>>>>>>> bb19449059105991693c172edf8db34073a419fe
        subprocess.run(
            ["git", "status"],
            capture_output=True, check=True, text=True, cwd=Path.cwd()
        )

<<<<<<< HEAD
        print("A contactar o GitHub para procurar atualizacoes...")
        # Busca as √∫ltimas altera√ß√µes do reposit√≥rio remoto sem as aplicar
=======
        print("üì° A contactar o GitHub para procurar atualiza√ß√µes...")
>>>>>>> bb19449059105991693c172edf8db34073a419fe
        subprocess.run(
            ["git", "fetch"],
            capture_output=True, check=True, text=True, cwd=Path.cwd()
        )

        status_result = subprocess.run(
            ["git", "status", "-uno"],
            capture_output=True, check=True, text=True, cwd=Path.cwd()
        )
        
        output = status_result.stdout.lower()

        if "your branch is up to date" in output:
            return "atualizado", "‚úÖ O seu script j√° est√° na vers√£o mais recente."
        elif "your branch is behind" in output:
            return "atualizacao_disponivel", "üÜï Uma nova vers√£o est√° dispon√≠vel!"
        elif "have diverged" in output:
            return "divergente", "‚ö†Ô∏è A sua vers√£o local e a remota divergem. Recomenda-se uma reinstala√ß√£o."
        else:
            return "erro", "ü§î N√£o foi poss√≠vel determinar o estado da atualiza√ß√£o."

    except FileNotFoundError:
        return "erro", "‚ùå O comando 'git' n√£o foi encontrado. Certifique-se de que o Git est√° instalado."
    except subprocess.CalledProcessError as e:
        error_message = e.stderr or e.stdout
        if "not a git repository" in error_message.lower():
             return "erro", "‚ùå Esta n√£o parece ser uma instala√ß√£o via 'git clone'."
        return "erro", f"‚ùå Ocorreu um erro ao comunicar com o Git:\n{error_message}"