# -*- coding: utf-8 -*-
"""
M√≥dulo para gerir a verifica√ß√£o de atualiza√ß√µes do projeto usando Git.
"""
import os
import subprocess
from pathlib import Path

# URL do reposit√≥rio remoto para refer√™ncia
REPO_URL = "https://github.com/JonJonesBR/MeuConversorTTS.git"

def is_git_repository():
    """Verifica se o diret√≥rio atual do script √© um reposit√≥rio Git v√°lido."""
    project_path = Path.cwd()
    git_path = project_path / ".git"
    return git_path.is_dir()

def check_for_updates_git():
    """
    Usa comandos Git para verificar se h√° atualiza√ß√µes no reposit√≥rio remoto.
    Retorna um status: 'atualizado', 'atualizacao_disponivel', 'erro' ou 'divergente'.
    """
    if not is_git_repository():
        return "erro", "‚ùå Esta n√£o parece ser uma instala√ß√£o via 'git clone'. A atualiza√ß√£o autom√°tica n√£o √© poss√≠vel."

    try:
        print("üîé A verificar o estado do reposit√≥rio local...")
        # Limpa o estado local para evitar falsos positivos
        subprocess.run(["git", "remote", "update"], capture_output=True, check=True, text=True, cwd=Path.cwd())

        print("üì° A contactar o GitHub para procurar atualiza√ß√µes...")
        status_result = subprocess.run(
            ["git", "status", "-uno"],
            capture_output=True, check=True, text=True, cwd=Path.cwd()
        )
        
        output = status_result.stdout.lower()

        if "your branch is up to date" in output:
            return "atualizado", "‚úÖ O seu script j√° est√° na vers√£o mais recente."
        elif "your branch is behind" in output:
            return "atualizacao_disponivel", "üÜï Uma nova vers√£o est√° dispon√≠vel!"
        elif "have diverged" in output:
            return "divergente", "‚ö†Ô∏è A sua vers√£o local e a remota divergem. A atualiza√ß√£o for√ßar√° a vers√£o do GitHub."
        else:
            # Se houver modifica√ß√µes locais, mas o branch n√£o estiver "behind", ainda oferece a atualiza√ß√£o para resetar.
            if "changes not staged for commit" in output or "untracked files" in output:
                 return "divergente", "‚ö†Ô∏è Foram detetadas altera√ß√µes locais. A atualiza√ß√£o ir√° substitu√≠-las pela vers√£o oficial."
            return "erro", "ü§î N√£o foi poss√≠vel determinar o estado da atualiza√ß√£o."

    except FileNotFoundError:
        return "erro", "‚ùå O comando 'git' n√£o foi encontrado. Certifique-se de que o Git est√° instalado."
    except subprocess.CalledProcessError as e:
        error_message = e.stderr or e.stdout
        return "erro", f"‚ùå Ocorreu um erro ao comunicar com o Git:\n{error_message}"

async def verificar_e_atualizar():
    """
    Verifica por atualiza√ß√µes e aplica se dispon√≠vel, for√ßando a atualiza√ß√£o
    para evitar conflitos locais.
    """
    status, message = check_for_updates_git()
    print(message)

    # Permite a atualiza√ß√£o tanto se estiver desatualizado ("behind") quanto se tiver divergido
    if status in ["atualizacao_disponivel", "divergente"]:
        print("\nüîÑ A aplicar atualiza√ß√£o... Isto ir√° substituir quaisquer altera√ß√µes locais.")
        try:
            # 1. Busca as √∫ltimas altera√ß√µes do reposit√≥rio remoto
            subprocess.run(["git", "fetch", "origin"], capture_output=True, check=True, text=True, cwd=Path.cwd())
            
            # 2. For√ßa o reset do branch local para corresponder ao branch 'main' do reposit√≥rio remoto
            subprocess.run(["git", "reset", "--hard", "origin/main"], capture_output=True, check=True, text=True, cwd=Path.cwd())
            
            print("\n‚úÖ Atualiza√ß√£o aplicada com sucesso!")
            print("   √â recomendado reiniciar o script para que as altera√ß√µes tenham efeito.")

        except subprocess.CalledProcessError as e:
            # Imprime o erro detalhado do Git para ajudar a diagnosticar
            error_details = e.stderr.strip() if e.stderr else e.stdout.strip()
            print(f"‚ùå Erro ao aplicar atualiza√ß√£o: {e}")
            if error_details:
                print(f"   Detalhes do Git: {error_details}")
