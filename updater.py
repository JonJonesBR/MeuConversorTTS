# -*- coding: utf-8 -*-
"""
M√≥dulo para gerir a verifica√ß√£o de atualiza√ß√µes do projeto usando Git.
Implementa√ß√£o robusta baseada em 'git rev-list', independente do idioma.
"""

from __future__ import annotations

import subprocess
from pathlib import Path
from typing import Tuple

# URL do reposit√≥rio remoto para refer√™ncia (n√£o √© estritamente necess√°rio)
REPO_URL = "https://github.com/JonJonesBR/MeuConversorTTS.git"


def _run_git(args: list[str]) -> Tuple[int, str, str]:
    """Executa um comando git no diret√≥rio atual e retorna (rc, stdout, stderr)."""
    try:
        proc = subprocess.run(
            ["git", *args],
            cwd=Path.cwd(),
            capture_output=True,
            text=True,
            check=False
        )
        return proc.returncode, proc.stdout.strip(), (proc.stderr or "").strip()
    except FileNotFoundError:
        return 127, "", "git n√£o encontrado no PATH"


def is_git_repository() -> bool:
    """Verifica se o diret√≥rio atual √© um reposit√≥rio Git v√°lido."""
    rc, out, _ = _run_git(["rev-parse", "--is-inside-work-tree"])
    return rc == 0 and out.lower() == "true"


def _descobrir_branch_remoto_padrao() -> str:
    """
    Tenta descobrir o branch padr√£o do remoto 'origin' (ex.: 'main' ou 'master').
    Fallback: 'main'.
    """
    # ex.: 'origin/main'
    rc, out, _ = _run_git(["symbolic-ref", "--quiet", "--short", "refs/remotes/origin/HEAD"])
    if rc == 0 and out.startswith("origin/"):
        return out.split("/", 1)[1]
    return "main"


def _estado_relativo(remote_branch: str) -> Tuple[int, int]:
    """
    Retorna (ahead, behind) comparando HEAD com origin/<remote_branch>,
    ap√≥s garantir fetch.
    """
    _run_git(["remote", "update"])
    _run_git(["fetch", "origin", "--prune"])
    rc, out, err = _run_git(["rev-list", "--left-right", "--count", f"HEAD...origin/{remote_branch}"])
    if rc != 0 or not out:
        # Pode ocorrer se o reposit√≥rio local n√£o aponta para origin/<branch>.
        # Fallback para tentar diretamente 'origin/main'.
        rc2, out2, _ = _run_git(["rev-list", "--left-right", "--count", "HEAD...origin/main"])
        if rc2 != 0 or not out2:
            # Sem refer√™ncia confi√°vel
            return (0, 0)
        out = out2
    # Ex.: "A B" -> A commits √† esquerda (local √† frente), B commits √† direita (local atr√°s)
    try:
        left_str, right_str = out.split()
        ahead = int(left_str)
        behind = int(right_str)
        return (ahead, behind)
    except Exception:
        return (0, 0)


def check_for_updates_git() -> tuple[str, str]:
    """
    Verifica o estado do reposit√≥rio em rela√ß√£o ao remoto.
    Retorna (status, mensagem), onde status ‚àà {'atualizado','atualizacao_disponivel','divergente','erro'}.
    """
    if not is_git_repository():
        return "erro", "‚ùå Esta n√£o parece ser uma instala√ß√£o via 'git clone'. A atualiza√ß√£o autom√°tica n√£o √© poss√≠vel."

    # Verifica se o git est√° acess√≠vel
    rc_git, _, err_git = _run_git(["--version"])
    if rc_git != 0:
        return "erro", "‚ùå O comando 'git' n√£o foi encontrado. Certifique-se de que o Git est√° instalado."

    print("üîé A verificar o estado do reposit√≥rio local...")
    branch_remoto = _descobrir_branch_remoto_padrao()

    ahead, behind = _estado_relativo(branch_remoto)

    if ahead == 0 and behind == 0:
        # Pode significar "em dia" OU que n√£o conseguimos determinar (e.g., remoto ausente).
        # Tentar identificar altera√ß√µes locais n√£o commitadas apenas para orientar.
        rc_st, out_st, _ = _run_git(["status", "--porcelain"])
        if rc_st == 0 and not out_st:
            return "atualizado", "‚úÖ O seu script j√° est√° na vers√£o mais recente."
        else:
            # H√° modifica√ß√µes locais, mas sem commits √† frente/atr√°s
            return "divergente", "‚ö†Ô∏è Foram detectadas altera√ß√µes locais. A atualiza√ß√£o ir√° substitu√≠-las pela vers√£o oficial."
    elif ahead == 0 and behind > 0:
        return "atualizacao_disponivel", "üÜï Uma nova vers√£o est√° dispon√≠vel!"
    elif ahead > 0 and behind == 0:
        return "divergente", "‚ö†Ô∏è O seu branch local est√° √† frente do remoto (commits locais). A atualiza√ß√£o for√ßar√° a vers√£o do GitHub."
    else:  # ahead > 0 and behind > 0
        return "divergente", "‚ö†Ô∏è O seu branch local e o remoto divergem. A atualiza√ß√£o for√ßar√° a vers√£o do GitHub."


async def verificar_e_atualizar() -> None:
    """
    Verifica por atualiza√ß√µes e aplica, for√ßando a atualiza√ß√£o para evitar conflitos locais.
    """
    status, message = check_for_updates_git()
    print(message)

    if status in ("atualizacao_disponivel", "divergente"):
        print("\nüîÑ A aplicar atualiza√ß√£o... Isto ir√° substituir quaisquer altera√ß√µes locais.")
        branch_remoto = _descobrir_branch_remoto_padrao()
        # Busca e reseta para a refer√™ncia do remoto
        rc1, _, err1 = _run_git(["fetch", "origin"])
        if rc1 != 0:
            print(f"‚ùå Erro ao buscar atualiza√ß√µes: {err1}")
            return
        rc2, _, err2 = _run_git(["reset", "--hard", f"origin/{branch_remoto}"])
        if rc2 != 0:
            print(f"‚ùå Erro ao aplicar atualiza√ß√£o: {err2}")
            return

        print("\n‚úÖ Atualiza√ß√£o aplicada com sucesso!")
        print("   √â recomendado reiniciar o script para que as altera√ß√µes tenham efeito.")
